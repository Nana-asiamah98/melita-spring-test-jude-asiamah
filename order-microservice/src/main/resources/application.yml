environ_variables:
  db-url: "jdbc:postgresql://dpg-ce4ej514reb6t8cl1bdg-a.oregon-postgres.render.com/orderdb"
  username: 'nana'
  password: 'sxbiz4FkaxOkbuY3YiHX7CGhMXUZ1Oqq'
  schema: 'order_schema'
  secret: "secret"

spring:
  jpa:
    hibernate:
      ddl-auto: update
  datasource:
    url: ${environ_variables.db-url}
    username: ${environ_variables.username}
    password: ${environ_variables.password}
    hikari:
      schema: ${environ_variables.schema}
  flyway:
    url: ${environ_variables.db-url}
    user: ${environ_variables.username}
    password: ${environ_variables.password}
    schemas: ${environ_variables.schema}
    installed-by: "Nana Asiamah"
    enabled: true
  application:
    name: order-service
  kafka:
    bootstrap-servers: "localhost:9092"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    template:
      default-topic: orderTopic
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://lemur-0.cloud-iam.com/auth/realms/order-api-stack
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher


eureka:
  client:
    service-url:
      defaultZone: "http://localhost:8761/eureka/"

server:
  port: 7700
  servlet:
    context-path: /order

keycloak:
  server: "https://lemur-0.cloud-iam.com"
  client-id: "order-service"
  client-secret: "bL2c9sExIRhvSkKfas7YGs6voXNvIqWN"
  realm: "order-api-stack"

springdoc:
  version: '@springdoc.version@'
  swagger-ui:
    oauth:
      clientId: "order-service"
      clientSecret: "bL2c9sExIRhvSkKfas7YGs6voXNvIqWN"
  oAuthFlow:
    authorizationUrl: ${OAUTH2_SERVER:${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/auth
    tokenUrl: ${OAUTH2_SERVER:${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/token
